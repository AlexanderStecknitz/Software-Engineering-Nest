// Copyright (C) 2020 - present Juergen Zimmermann, Hochschule Karlsruhe
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

//
// N e t z w e r k   -   V e r b i n d u n g   n o t w e n d i g
//

### Einloggen in der Rolle "admin", "mitarbeiter" und "kunde"
// @name login
POST {{graphQlUrl}}
Content-Type: application/json
X-REQUEST-TYPE: GraphQL

mutation {
  login(username: "admin", password: "p") { token expiresIn roles }
}

### Einloggen in der Rolle "mitarbeiter" und "kunde"
// @name login
POST {{graphQlUrl}}
Content-Type: application/json
X-REQUEST-TYPE: GraphQL

mutation {
  login(username: "alfred.alpha", password: "p") { token expiresIn roles }
}

### Einloggen in der Rolle "kunde"
// @name login
POST {{graphQlUrl}}
Content-Type: application/json
X-REQUEST-TYPE: GraphQL

mutation {
  login(username: "dirk.delta", password: "p") { token expiresIn roles }
}

### Einloggen mit falschem Passwort
// @name login
POST {{graphQlUrl}}
Content-Type: application/json
X-REQUEST-TYPE: GraphQL

mutation {
  login(username: "admin", password: "FALSCH") { token expiresIn roles }
}

### Neue Chips anlegen
POST {{graphQlUrl}}
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.login.token}}
X-REQUEST-TYPE: GraphQL

mutation {
  create(
    produktname: "Testmutation",
    geschmack: "Ungarisch",
    typ: KARTOFFEL,
    bestand: 10,
    preis: 11.1,
    rabatt: 0.011,
    lieferbar: true,
    schlagwoerter: ["UNGARISCH"]
  )
}

### Neue Chips mit ungueltigen Daten anlegen
POST {{graphQlUrl}}
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.login.token}}
X-REQUEST-TYPE: GraphQL

mutation {
  create(
    produktname: "Testmutation",
    geschmack: "Ungarisch",
    typ: KARTOFFEL,
    bestand: -12231,
    preis: -11.1,
    rabatt: 0.011,
    lieferbar: true,
    schlagwoerter: ["UNGARISCH"]
  )
}

### Vorhandene Chips aktualisieren
POST {{graphQlUrl}}
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.login.token}}
X-REQUEST-TYPE: GraphQL

mutation {
  update(
    id: "000000000000000000000003",
    version: 0,
    chips: {
      produktname: "Ge√§ndertegraphql",
      geschmack: "Paprika",
      typ: GEMUESE,
      bestand: 2,
      preis: 1.1,
      rabatt: 0.02,
      lieferbar: false,
      schlagwoerter: ["PAPRIKA"]
    }
  )
}

### Vorhandene Chips mit ungueltigen Werten aktualisieren
POST {{graphQlUrl}}
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.login.token}}
X-REQUEST-TYPE: GraphQL

mutation {
  update(
    id: "000000000000000000000003",
    version: 0,
    buch: {
      produktname: "Testmutation",
      geschmack: "Ungarisch",
      typ: KARTOFFEL,
      bestand: -12231,
      preis: -11.1,
      rabatt: 0.011,
      lieferbar: true,
      schlagwoerter: ["UNGARISCH"]
    }
  )
}

### Nicht-Vorhandene Chips aktualisieren
POST {{graphQlUrl}}
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.login.token}}
X-REQUEST-TYPE: GraphQL

mutation {
  update(
    id: "999999999999999999999999",
    version: 0,
    buch: {
      produktname: "Testmutation",
      geschmack: "Ungarisch",
      typ: KARTOFFEL,
      bestand: 10,
      preis: 11.1,
      rabatt: 0.011,
      lieferbar: true,
      schlagwoerter: ["UNGARISCH"]
    }
  )
}

### Vorhandene Chips loeschen
POST {{graphQlUrl}}
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.login.token}}
X-REQUEST-TYPE: GraphQL

mutation {
  delete(id: "000000000000000000000004")
}
